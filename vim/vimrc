set t_ut=
set nocompatible              " be iMproved, required
filetype off                  " required


"FileType support
set filetype=on
filetype plugin on
filetype indent on

let g:completer_python_binary = '/usr/local/lib/python2.7/'
let g:completer_node_binary = 'usr/local/bin/node'

" moving lines
nnoremap <Down> :m .+1<CR>==
nnoremap <Up> :m .-2<CR>==
inoremap <Down> <Esc>:m .+1<CR>==gi
inoremap <Up> <Esc>:m .-2<CR>==gi
vnoremap <Down> :m '>+1<CR>gv=gv
vnoremap <Up> :m '<-2<CR>gv=gv

inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"

colorscheme badwolf

set incsearch


set ignorecase
set smartindent
set tabstop=4 
set shiftwidth=4 
set expandtab

set smartcase

"ctrlp stuff
set runtimepath^=~/.vim/pack/start/ctrlp.vim
set wildignore+=**/*.git,**/*.class,**/*.pyc,**/*.swp,**/*jar,**/*.zip
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'rw'
map <C-b> :CtrlPBuffer<CR>
map <C-d> :CtrlPDir<CR>
let g:ctrlp_extensions = [ 'dir','line']
let g:ctrlp_match_window = 'results:100'
let g:ctrlp_switch_buffer = 'et'
let g:ctrlp_max_depth = 4

if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif



" yaml indentation
au FileType yaml setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2

let g:auto_save = 1

let g:mwIgnoreCase = 0
let g:mwDefaultHighlightingPalette = 'extended' 
autocmd VimEnter * 3Mark!DONE
autocmd VimEnter * 11Mark!CANCELLED
autocmd VimEnter * 4Mark!BLOCKED
autocmd VimEnter * 19Mark!TODO
autocmd VimEnter * 1Mark!EASY
autocmd VimEnter * 2Mark!DOING
autocmd VimEnter * 6Mark!DONOW



filetype plugin indent on
syntax on

set winaltkeys=no

" validator config
let g:validator_javascript_checkers = ['jshint']
let g:validator_python_checkers = ['flake8']
let g:validator_permament_sign = 1


:set backspace=indent,eol,start

let g:rainbow_active = 1
let g:markdown_folding = 1 
let g:markdown_enable_folding = 1 

nmap <leader>d IDONE <ESC>
nmap <leader>t ITODO <ESC>
nmap <leader>e IEASY <ESC>



